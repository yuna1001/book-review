version: '3'

services:

  djangoapp:
    build: . # docker-compose.ymlと同じディレクトリのDockerfileを指定
    volumes: # ホスト：コンテナの順
      - .:/usr/src/app # docker-compose.ymlと同階層のファイルをコンテナにマウント
      - static_volume:/usr/src/app/static # 名前付きボリュームを指定したコンテナのディレクトリにマウント
      - media_volume:/usr/src/app/media
    working_dir: /usr/src/app/
    #command: python3 manage.py runserver 0.0.0.0:8000 --settings=config.settings.local
    # command: gunicorn --workers 3 --bind=:8000 --env DJANGO_SETTINGS_MODULE=config.settings.local config.wsgi:application
    stdin_open: true
    tty: true
    expose:
      - "8000"
    depends_on:
      - postgres

  # サービス名は、設定ファイルのデータベースの”HOST”の設定値に合わせる必要がある
  postgres:
    image: postgres
    volumes:
      - db_volume:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  nginx:
      image: nginx
      ports:
        - "8000:80"
      volumes:
        - ./nginx/conf.d:/etc/nginx/conf.d
        - static_volume:/usr/src/app/static  # <-- bind the static volume
        - media_volume:/usr/src/app/media
      restart: always
      depends_on:
        - djangoapp

#ボリューム定義 Dockerマシン上のボリュームを作成。コンテナが削除された場合でもデータが残る。
volumes:
  static_volume:
  media_volume:
  db_volume: